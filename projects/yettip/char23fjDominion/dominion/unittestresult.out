TEST PASSED: test_two_player_game_initial_state: G.supplyCount[curse] = 10
TEST PASSED: test_two_player_game_initial_state: G.supplyCount[estate] = 8
TEST PASSED: test_two_player_game_initial_state: G.supplyCount[duchy] = 8
TEST PASSED: test_two_player_game_initial_state: G.supplyCount[province] = 8
TEST PASSED: test_two_player_game_initial_state: G.supplyCount[copper] = 46
TEST PASSED: test_two_player_game_initial_state: G.supplyCount[silver] = 40
TEST PASSED: test_two_player_game_initial_state: G.supplyCount[gold] = 30

TEST PASSED: test_three_player_game_initial_state: G.supplyCount[curse] = 20
TEST PASSED: test_three_player_game_initial_state: G.supplyCount[estate] = 12
TEST PASSED: test_three_player_game_initial_state: G.supplyCount[duchy] = 12
TEST PASSED: test_three_player_game_initial_state: G.supplyCount[province] = 12
TEST PASSED: test_three_player_game_initial_state: G.supplyCount[copper] = 39
TEST PASSED: test_three_player_game_initial_state: G.supplyCount[silver] = 40
TEST PASSED: test_three_player_game_initial_state: G.supplyCount[gold] = 30

test_buy_card_fails: Current number of buys = 0
TEST PASSED: User has no buys
TEST PASSED: User doesn't have enough coins
TEST PASSED: No Baron Cards to buy

test_buy_card_passes: Current number of buys = 1
TEST PASSED: Supply count contains 10 smithy cards
TEST PASSED: Player buys smithy
TEST PASSED: Player now has 9 smithy cards
TEST PASSED: Player has 1 less number of buys
TEST PASSED: Player now has 9 smithy cards
TEST PASSED: Player has 1 more card in discard deck
TEST PASSED: User now has 0 buys

TEST PASSED: test_game_over_true_no_province_cards
TEST PASSED: test_game_over_true_three_supply_pile_at_0
TEST PASSED: test_game_over_false: three piles are not empty
TEST PASSED: test_get_card_cost:CURSE
TEST PASSED: test_get_card_cost:ESTATE
TEST PASSED: test_get_card_cost:DUCHY
TEST PASSED: test_get_card_cost:PROVINCE
TEST PASSED: test_get_card_cost:COPPER
TEST PASSED: test_get_card_cost:SILVER
TEST PASSED: test_get_card_cost:GOLD
TEST PASSED: test_get_card_cost:ADVENTURER
TEST FAILED: Hand count from cardEffect(smithy)
TEST PASSED: Deck count from cardEffect(smithy)

TEST PASSED: Hand count from cardEffect(adventurer)
TEST PASSED: Deck count from cardEffect(adventurer)

TEST PASSED: Estate supply count from cardEffect(baron), choice 0
TEST PASSED: Deck count from cardEffect(baron), choice 0
TEST PASSED: Estate is discarded from cardEffect(baron), choice 0
TEST PASSED: Discard count is reduced by 1 from cardEffect(baron), choice 0

TEST PASSED: Increase Coins by 4 from cardEffect(baron), choice 1
TEST PASSED: Deck count from cardEffect(baron), choice 1

TEST PASSED: Increase coins by 2 from cardEffect(minion), choice 1
TEST FAILED: Last played card is Minion from cardEffect(minion), choice 1

TEST PASSED: Player has 4 cards in hand from cardEffect(minion), choice 2

TEST PASSED: Player has 4 cards in hand from cardEffect(minion), choice 2
TEST PASSED: Other player has 4 cards in hand from cardEffect(minion), choice 2

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:96.15% of 78
Branches executed:100.00% of 46
Taken at least once:89.13% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'numHandCards'
Lines executed:100.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:100.00% of 12
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:33.33% of 24
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
No calls

Function 'getCost'
Lines executed:36.67% of 30
Branches executed:100.00% of 28
Taken at least once:32.14% of 28
No calls

Function 'cardEffect'
Lines executed:29.95% of 187
Branches executed:45.30% of 117
Taken at least once:27.35% of 117
No calls

Function 'discardCard'
Lines executed:86.67% of 15
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'gainCard'
Lines executed:53.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'adventurerAction'
Lines executed:76.47% of 17
Branches executed:100.00% of 12
Taken at least once:66.67% of 12
No calls

Function 'smithyAction'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'tributeAction'
Lines executed:0.00% of 47
Branches executed:0.00% of 32
Taken at least once:0.00% of 32
No calls

Function 'ambassadorAction'
Lines executed:0.00% of 29
Branches executed:0.00% of 26
Taken at least once:0.00% of 26
No calls

Function 'cutpurseAction'
Lines executed:0.00% of 17
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

File 'dominion.c'
Lines executed:38.28% of 653
Branches executed:45.11% of 419
Taken at least once:31.03% of 419
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 85386 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
    85386:    9:  if (*(int*)a > *(int*)b)
    85386:    9-block  0
branch  0 taken 0
branch  1 taken 85386
    #####:   10:    return 1;
    $$$$$:   10-block  0
unconditional  0 never executed
    85386:   11:  if (*(int*)a < *(int*)b)
    85386:   11-block  0
branch  0 taken 30495
branch  1 taken 54891
    30495:   12:    return -1;
    30495:   12-block  0
unconditional  0 taken 30495
    54891:   13:  return 0;
    54891:   13-block  0
unconditional  0 taken 54891
    85386:   14:}
    85386:   14-block  0
unconditional  0 taken 85386
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    $$$$$:   17-block  0
unconditional  0 never executed
    #####:   18:  return g;
    $$$$$:   18-block  0
unconditional  0 never executed
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
unconditional  0 never executed
        -:   35:}
        -:   36:
function initializeGame called 2013 returned 100% blocks executed 95%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2013:   44:  SelectStream(1);
     2013:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     2013:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
     2013:   48-block  0
branch  0 taken 2013
branch  1 taken 0
     2013:   48-block  1
branch  2 taken 0
branch  3 taken 2013
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
unconditional  0 never executed
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2013:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    22143:   57:  for (i = 0; i < 10; i++)
     2013:   57-block  0
unconditional  0 taken 2013
    22143:   57-block  1
branch  1 taken 20130
branch  2 taken 2013
    20130:   57-block  2
unconditional  3 taken 20130
        -:   58:    {
   221430:   59:      for (j = 0; j < 10; j++)
    20130:   59-block  0
unconditional  0 taken 20130
   221430:   59-block  1
branch  1 taken 201300
branch  2 taken 20130
   201300:   59-block  2
unconditional  3 taken 201300
        -:   60:        {
   201300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
   201300:   61-block  0
branch  0 taken 181170
branch  1 taken 20130
   181170:   61-block  1
branch  2 taken 0
branch  3 taken 181170
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
unconditional  0 never executed
        -:   64:	    }
   201300:   65:        }
   201300:   65-block  0
unconditional  0 taken 201300
    20130:   66:    }
    20130:   66-block  0
unconditional  0 taken 20130
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2013:   73:  if (numPlayers == 2)
     2013:   73-block  0
branch  0 taken 644
branch  1 taken 1369
        -:   74:    {
      644:   75:      state->supplyCount[curse] = 10;
      644:   76:    }
      644:   76-block  0
unconditional  0 taken 644
     1369:   77:  else if (numPlayers == 3)
     1369:   77-block  0
branch  0 taken 665
branch  1 taken 704
        -:   78:    {
      665:   79:      state->supplyCount[curse] = 20;
      665:   80:    }
      665:   80-block  0
unconditional  0 taken 665
        -:   81:  else
        -:   82:    {
      704:   83:      state->supplyCount[curse] = 30;
      704:   83-block  0
unconditional  0 taken 704
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2013:   87:  if (numPlayers == 2)
     2013:   87-block  0
branch  0 taken 644
branch  1 taken 1369
        -:   88:    {
      644:   89:      state->supplyCount[estate] = 8;
      644:   90:      state->supplyCount[duchy] = 8;
      644:   91:      state->supplyCount[province] = 8;
      644:   92:    }
      644:   92-block  0
unconditional  0 taken 644
        -:   93:  else
        -:   94:    {
     1369:   95:      state->supplyCount[estate] = 12;
     1369:   96:      state->supplyCount[duchy] = 12;
     1369:   97:      state->supplyCount[province] = 12;
     1369:   97-block  0
unconditional  0 taken 1369
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2013:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2013:  102:  state->supplyCount[silver] = 40;
     2013:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    42273:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
     2013:  106-block  0
unconditional  0 taken 2013
    42273:  106-block  1
branch  1 taken 40260
branch  2 taken 2013
    40260:  106-block  2
unconditional  3 taken 40260
        -:  107:    {
   332145:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
    40260:  108-block  0
unconditional  0 taken 40260
   332145:  108-block  1
branch  1 taken 312015
branch  2 taken 20130
   291885:  108-block  2
unconditional  3 taken 291885
        -:  109:	{
   312015:  110:	  if (kingdomCards[j] == i)
   312015:  110-block  0
branch  0 taken 20130
branch  1 taken 291885
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    20130:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
    20130:  113-block  0
branch  0 taken 20130
branch  1 taken 0
    20130:  113-block  1
branch  2 taken 2013
branch  3 taken 18117
        -:  114:		{
     2013:  115:		  if (numPlayers == 2){ 
     2013:  115-block  0
branch  0 taken 644
branch  1 taken 1369
      644:  116:		    state->supplyCount[i] = 8; 
      644:  117:		  }
      644:  117-block  0
unconditional  0 taken 644
     1369:  118:		  else{ state->supplyCount[i] = 12; }
     1369:  118-block  0
unconditional  0 taken 1369
     2013:  119:		}
     2013:  119-block  0
unconditional  0 taken 2013
        -:  120:	      else
        -:  121:		{
    18117:  122:		  state->supplyCount[i] = 10;
    18117:  122-block  0
unconditional  0 taken 18117
        -:  123:		}
    20130:  124:	      break;
    20130:  124-block  0
unconditional  0 taken 20130
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   291885:  128:	      state->supplyCount[i] = -1;
   291885:  128-block  0
unconditional  0 taken 291885
        -:  129:	    }
   291885:  130:	}
   291885:  130-block  0
unconditional  0 taken 291885
        -:  131:
    40260:  132:    }
    40260:  132-block  0
unconditional  0 taken 40260
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     8112:  138:  for (i = 0; i < numPlayers; i++)
     2013:  138-block  0
unconditional  0 taken 2013
     8112:  138-block  1
branch  1 taken 6099
branch  2 taken 2013
     6099:  138-block  2
unconditional  3 taken 6099
        -:  139:    {
     6099:  140:      state->deckCount[i] = 0;
    24396:  141:      for (j = 0; j < 3; j++)
     6099:  141-block  0
unconditional  0 taken 6099
    24396:  141-block  1
branch  1 taken 18297
branch  2 taken 6099
    18297:  141-block  2
unconditional  3 taken 18297
        -:  142:	{
    18297:  143:	  state->deck[i][j] = estate;
    18297:  144:	  state->deckCount[i]++;
    18297:  145:	}
    18297:  145-block  0
unconditional  0 taken 18297
    48792:  146:      for (j = 3; j < 10; j++)
     6099:  146-block  0
unconditional  0 taken 6099
    48792:  146-block  1
branch  1 taken 42693
branch  2 taken 6099
    42693:  146-block  2
unconditional  3 taken 42693
        -:  147:	{
    42693:  148:	  state->deck[i][j] = copper;
    42693:  149:	  state->deckCount[i]++;		
    42693:  150:	}
    42693:  150-block  0
unconditional  0 taken 42693
     6099:  151:    }
     6099:  151-block  0
unconditional  0 taken 6099
        -:  152:
        -:  153:  //shuffle player decks
     8112:  154:  for (i = 0; i < numPlayers; i++)
     2013:  154-block  0
unconditional  0 taken 2013
     8112:  154-block  1
branch  1 taken 6099
branch  2 taken 2013
     6099:  154-block  2
unconditional  3 taken 6099
        -:  155:    {
     6099:  156:      if ( shuffle(i, state) < 0 )
     6099:  156-block  0
branch  0 taken 0
branch  1 taken 6099
        -:  157:	{
    #####:  158:	  return -1;
    $$$$$:  158-block  0
unconditional  0 never executed
        -:  159:	}
     6099:  160:    }
     6099:  160-block  0
unconditional  0 taken 6099
        -:  161:
        -:  162:  //draw player hands
     8112:  163:  for (i = 0; i < numPlayers; i++)
     2013:  163-block  0
unconditional  0 taken 2013
     8112:  163-block  1
branch  1 taken 6099
branch  2 taken 2013
     6099:  163-block  2
unconditional  3 taken 6099
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     6099:  166:      state->handCount[i] = 0;
     6099:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
     6099:  173:    }
     6099:  173-block  0
unconditional  0 taken 6099
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    56364:  176:  for (i = 0; i <= treasure_map; i++)
     2013:  176-block  0
unconditional  0 taken 2013
    56364:  176-block  1
branch  1 taken 54351
branch  2 taken 2013
    54351:  176-block  2
unconditional  3 taken 54351
        -:  177:    {
    54351:  178:      state->embargoTokens[i] = 0;
    54351:  179:    }
    54351:  179-block  0
unconditional  0 taken 54351
        -:  180:
        -:  181:  //initialize first player's turn
     2013:  182:  state->outpostPlayed = 0;
     2013:  183:  state->phase = 0;
     2013:  184:  state->numActions = 1;
     2013:  185:  state->numBuys = 1;
     2013:  186:  state->playedCardCount = 0;
     2013:  187:  state->whoseTurn = 0;
     2013:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    12078:  192:  for (it = 0; it < 5; it++){
     2013:  192-block  0
unconditional  0 taken 2013
    12078:  192-block  1
branch  1 taken 10065
branch  2 taken 2013
    10065:  192-block  2
unconditional  3 taken 10065
    10065:  193:    drawCard(state->whoseTurn, state);
    10065:  194:  }
    10065:  194-block  0
unconditional  0 taken 10065
        -:  195:
     2013:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     2013:  198:  return 0;
     2013:  198-block  0
unconditional  0 taken 2013
     2013:  199:}
     2013:  199-block  0
unconditional  0 taken 2013
        -:  200:
function shuffle called 6099 returned 100% blocks executed 93%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     6099:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     6099:  209:  if (state->deckCount[player] < 1)
     6099:  209-block  0
branch  0 taken 0
branch  1 taken 6099
    #####:  210:    return -1;
    $$$$$:  210-block  0
unconditional  0 never executed
     6099:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    67089:  214:  while (state->deckCount[player] > 0) {
     6099:  214-block  0
unconditional  0 taken 6099
    67089:  214-block  1
branch  1 taken 60990
branch  2 taken 6099
    60990:  214-block  2
unconditional  3 taken 60990
    60990:  215:    card = floor(Random() * state->deckCount[player]);
    60990:  216:    newDeck[newDeckPos] = state->deck[player][card];
    60990:  217:    newDeckPos++;
   214956:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    60990:  218-block  0
unconditional  0 taken 60990
   214956:  218-block  1
branch  1 taken 153966
branch  2 taken 60990
   153966:  218-block  2
unconditional  3 taken 153966
   153966:  219:      state->deck[player][i] = state->deck[player][i+1];
   153966:  220:    }
   153966:  220-block  0
unconditional  0 taken 153966
    60990:  221:    state->deckCount[player]--;
        -:  222:  }
    67089:  223:  for (i = 0; i < newDeckPos; i++) {
     6099:  223-block  0
unconditional  0 taken 6099
    67089:  223-block  1
branch  1 taken 60990
branch  2 taken 6099
    60990:  223-block  2
unconditional  3 taken 60990
    60990:  224:    state->deck[player][i] = newDeck[i];
    60990:  225:    state->deckCount[player]++;
    60990:  226:  }
    60990:  226-block  0
unconditional  0 taken 60990
        -:  227:
     6099:  228:  return 0;
     6099:  228-block  0
unconditional  0 taken 6099
     6099:  229:}
     6099:  229-block  0
unconditional  0 taken 6099
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
    $$$$$:  237-block  0
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
    $$$$$:  239-block  0
unconditional  0 never executed
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
    $$$$$:  243-block  0
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
    $$$$$:  245-block  0
unconditional  0 never executed
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
    $$$$$:  252-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  252-block  1
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
    $$$$$:  254-block  0
unconditional  0 never executed
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  258-block  0
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
    $$$$$:  260-block  0
unconditional  0 never executed
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    $$$$$:  269-block  0
unconditional  0 never executed
    #####:  270:}
    $$$$$:  270-block  0
unconditional  0 never executed
        -:  271:
function buyCard called 4 returned 100% blocks executed 100%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
        4:  282-block  0
branch  0 taken 1
branch  1 taken 3
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        1:  285-block  0
unconditional  0 taken 1
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
        3:  286-block  0
branch  0 taken 1
branch  1 taken 2
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        1:  289-block  0
unconditional  0 taken 1
        2:  290:  } else if (state->coins < getCost(supplyPos)){
        2:  290-block  0
branch  0 taken 1
branch  1 taken 1
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        1:  293-block  0
unconditional  0 taken 1
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  300:    state->numBuys--;
        1:  300-block  0
unconditional  0 taken 1
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        1:  308-block  0
unconditional  0 taken 1
        4:  309:}
        4:  309-block  0
unconditional  0 taken 4
        -:  310:
function numHandCards called 3010 returned 100% blocks executed 100%
        -:  311:int numHandCards(struct gameState *state) {
     3010:  312:  return state->handCount[ whoseTurn(state) ];
     3010:  312-block  0
unconditional  0 taken 3010
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
    $$$$$:  317-block  0
unconditional  0 never executed
        -:  318:}
        -:  319:
function supplyCount called 7 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
        7:  321:  return state->supplyCount[card];
        7:  321-block  0
unconditional  0 taken 7
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  328-block  0
unconditional  0 never executed
    $$$$$:  328-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  328-block  2
unconditional  3 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    $$$$$:  330-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  330-block  1
unconditional  2 never executed
    #####:  331:    }
    $$$$$:  331-block  0
unconditional  0 never executed
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  333-block  0
unconditional  0 never executed
    $$$$$:  333-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  333-block  2
unconditional  3 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    $$$$$:  335-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  335-block  1
unconditional  2 never executed
    #####:  336:    }
    $$$$$:  336-block  0
unconditional  0 never executed
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  338-block  0
unconditional  0 never executed
    $$$$$:  338-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  338-block  2
unconditional  3 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    $$$$$:  340-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  340-block  1
unconditional  2 never executed
    #####:  341:    }
    $$$$$:  341-block  0
unconditional  0 never executed
        -:  342:
    #####:  343:  return count;
    $$$$$:  343-block  0
unconditional  0 never executed
        -:  344:}
        -:  345:
function whoseTurn called 7019 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
     7019:  347:  return state->whoseTurn;
     7019:  347-block  0
unconditional  0 taken 7019
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  356-block  0
unconditional  0 never executed
    $$$$$:  356-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  356-block  2
unconditional  3 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    $$$$$:  359-block  0
unconditional  0 never executed
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  363-block  0
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
    $$$$$:  365-block  0
unconditional  0 never executed
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  367-block  0
unconditional  0 never executed
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    $$$$$:  380-block  0
unconditional  0 never executed
    $$$$$:  380-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  380-block  2
unconditional  3 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
    $$$$$:  382-block  0
unconditional  0 never executed
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
    $$$$$:  387-block  0
unconditional  0 never executed
        -:  388:}
        -:  389:
function isGameOver called 3 returned 100% blocks executed 100%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        3:  395:  if (state->supplyCount[province] == 0)
        3:  395-block  0
branch  0 taken 1
branch  1 taken 2
        -:  396:    {
        1:  397:      return 1;
        1:  397-block  0
unconditional  0 taken 1
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        2:  401:  j = 0;
       52:  402:  for (i = 0; i < 25; i++)
        2:  402-block  0
unconditional  0 taken 2
       52:  402-block  1
branch  1 taken 50
branch  2 taken 2
       50:  402-block  2
unconditional  3 taken 50
        -:  403:    {
       50:  404:      if (state->supplyCount[i] == 0)
       50:  404-block  0
branch  0 taken 5
branch  1 taken 45
        -:  405:	{
        5:  406:	  j++;
        5:  407:	}
        5:  407-block  0
unconditional  0 taken 5
       50:  408:    }
       50:  408-block  0
unconditional  0 taken 50
        2:  409:  if ( j >= 3)
        2:  409-block  0
branch  0 taken 1
branch  1 taken 1
        -:  410:    {
        1:  411:      return 1;
        1:  411-block  0
unconditional  0 taken 1
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        1:  414-block  0
unconditional  0 taken 1
        3:  415:}
        3:  415-block  0
unconditional  0 taken 3
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  422-block  0
unconditional  0 never executed
    $$$$$:  422-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  422-block  2
unconditional  3 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
unconditional  2 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
unconditional  2 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
unconditional  2 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
unconditional  2 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
unconditional  2 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  429-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  429-block  1
unconditional  2 never executed
    #####:  430:    }
    $$$$$:  430-block  0
unconditional  0 never executed
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  433-block  0
unconditional  0 never executed
    $$$$$:  433-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  433-block  2
unconditional  3 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
unconditional  2 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
unconditional  2 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
unconditional  2 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
unconditional  2 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
unconditional  2 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  440-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  440-block  1
unconditional  2 never executed
    #####:  441:    }
    $$$$$:  441-block  0
unconditional  0 never executed
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  444-block  0
unconditional  0 never executed
    $$$$$:  444-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  444-block  2
unconditional  3 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
unconditional  2 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
unconditional  2 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
unconditional  2 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
unconditional  2 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
unconditional  2 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  451-block  1
unconditional  2 never executed
    #####:  452:    }
    $$$$$:  452-block  0
unconditional  0 never executed
        -:  453:
    #####:  454:  return score;
    $$$$$:  454-block  0
unconditional  0 never executed
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  464-block  0
unconditional  0 never executed
    $$$$$:  464-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  464-block  2
unconditional  3 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
    $$$$$:  467-block  0
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
    $$$$$:  470-block  0
unconditional  0 never executed
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
    $$$$$:  473-block  0
unconditional  0 never executed
        -:  474:	}
    #####:  475:    }
    $$$$$:  475-block  0
unconditional  0 never executed
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  479-block  0
unconditional  0 never executed
    $$$$$:  479-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  479-block  2
unconditional  3 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
    $$$$$:  481-block  0
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    $$$$$:  484-block  0
unconditional  0 never executed
    #####:  485:    }
    $$$$$:  485-block  0
unconditional  0 never executed
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  490-block  0
unconditional  0 never executed
    $$$$$:  490-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  490-block  2
unconditional  3 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  492-block  1
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    $$$$$:  495-block  0
unconditional  0 never executed
    #####:  496:    }
    $$$$$:  496-block  0
unconditional  0 never executed
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  500-block  0
unconditional  0 never executed
    $$$$$:  500-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  500-block  2
unconditional  3 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
    $$$$$:  502-block  0
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    $$$$$:  505-block  0
unconditional  0 never executed
    #####:  506:    }
    $$$$$:  506-block  0
unconditional  0 never executed
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  510-block  0
unconditional  0 never executed
    $$$$$:  510-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  510-block  2
unconditional  3 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
    $$$$$:  512-block  0
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
    $$$$$:  515-block  0
unconditional  0 never executed
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
    $$$$$:  518-block  0
unconditional  0 never executed
        -:  519:	}
    #####:  520:    }
    $$$$$:  520-block  0
unconditional  0 never executed
        -:  521:
    #####:  522:  return 0;
    $$$$$:  522-block  0
unconditional  0 never executed
        -:  523:}
        -:  524:
function drawCard called 15277 returned 100% blocks executed 41%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    15277:  528:  if (state->deckCount[player] <= 0){//Deck is empty
    15277:  528-block  0
branch  0 taken 0
branch  1 taken 15277
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    $$$$$:  533-block  0
unconditional  0 never executed
    $$$$$:  533-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  533-block  2
unconditional  3 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
    $$$$$:  536-block  0
unconditional  0 never executed
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    $$$$$:  559-block  0
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
    $$$$$:  560-block  0
unconditional  0 never executed
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
    $$$$$:  565-block  0
unconditional  0 never executed
        -:  566:
        -:  567:  else{
    15277:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    15277:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    15277:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    15277:  576:    state->deckCount[player]--;
    15277:  577:    state->handCount[player]++;//Increment hand count
    15277:  577-block  0
unconditional  0 taken 15277
        -:  578:  }
        -:  579:
    15277:  580:  return 0;
    15277:  580-block  0
unconditional  0 taken 15277
    15277:  581:}
    15277:  581-block  0
unconditional  0 taken 15277
        -:  582:
function getCost called 11 returned 100% blocks executed 38%
        -:  583:int getCost(int cardNumber)
        -:  584:{
       11:  585:  switch( cardNumber ) 
       11:  585-block  0
branch  0 taken 1
branch  1 taken 1
branch  2 taken 1
branch  3 taken 2
branch  4 taken 1
branch  5 taken 1
branch  6 taken 1
branch  7 taken 1
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 2
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
branch 21 taken 0
branch 22 taken 0
branch 23 taken 0
branch 24 taken 0
branch 25 taken 0
branch 26 taken 0
branch 27 taken 0
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        1:  588-block  0
unconditional  0 taken 1
        -:  589:    case estate:
        1:  590:      return 2;
        1:  590-block  0
unconditional  0 taken 1
        -:  591:    case duchy:
        1:  592:      return 5;
        1:  592-block  0
unconditional  0 taken 1
        -:  593:    case province:
        2:  594:      return 8;
        2:  594-block  0
unconditional  0 taken 2
        -:  595:    case copper:
        1:  596:      return 0;
        1:  596-block  0
unconditional  0 taken 1
        -:  597:    case silver:
        1:  598:      return 3;
        1:  598-block  0
unconditional  0 taken 1
        -:  599:    case gold:
        1:  600:      return 6;
        1:  600-block  0
unconditional  0 taken 1
        -:  601:    case adventurer:
        1:  602:      return 6;
        1:  602-block  0
unconditional  0 taken 1
        -:  603:    case council_room:
    #####:  604:      return 5;
    $$$$$:  604-block  0
unconditional  0 never executed
        -:  605:    case feast:
    #####:  606:      return 4;
    $$$$$:  606-block  0
unconditional  0 never executed
        -:  607:    case gardens:
    #####:  608:      return 4;
    $$$$$:  608-block  0
unconditional  0 never executed
        -:  609:    case mine:
    #####:  610:      return 5;
    $$$$$:  610-block  0
unconditional  0 never executed
        -:  611:    case remodel:
    #####:  612:      return 4;
    $$$$$:  612-block  0
unconditional  0 never executed
        -:  613:    case smithy:
        2:  614:      return 4;
        2:  614-block  0
unconditional  0 taken 2
        -:  615:    case village:
    #####:  616:      return 3;
    $$$$$:  616-block  0
unconditional  0 never executed
        -:  617:    case baron:
    #####:  618:      return 4;
    $$$$$:  618-block  0
unconditional  0 never executed
        -:  619:    case great_hall:
    #####:  620:      return 3;
    $$$$$:  620-block  0
unconditional  0 never executed
        -:  621:    case minion:
    #####:  622:      return 5;
    $$$$$:  622-block  0
unconditional  0 never executed
        -:  623:    case steward:
    #####:  624:      return 3;
    $$$$$:  624-block  0
unconditional  0 never executed
        -:  625:    case tribute:
    #####:  626:      return 5;
    $$$$$:  626-block  0
unconditional  0 never executed
        -:  627:    case ambassador:
    #####:  628:      return 3;
    $$$$$:  628-block  0
unconditional  0 never executed
        -:  629:    case cutpurse:
    #####:  630:      return 4;
    $$$$$:  630-block  0
unconditional  0 never executed
        -:  631:    case embargo: 
    #####:  632:      return 2;
    $$$$$:  632-block  0
unconditional  0 never executed
        -:  633:    case outpost:
    #####:  634:      return 5;
    $$$$$:  634-block  0
unconditional  0 never executed
        -:  635:    case salvager:
    #####:  636:      return 4;
    $$$$$:  636-block  0
unconditional  0 never executed
        -:  637:    case sea_hag:
    #####:  638:      return 4;
    $$$$$:  638-block  0
unconditional  0 never executed
        -:  639:    case treasure_map:
    #####:  640:      return 4;
    $$$$$:  640-block  0
unconditional  0 never executed
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
    $$$$$:  643-block  0
unconditional  0 never executed
       11:  644:}
       11:  644-block  0
unconditional  0 taken 11
        -:  645:
function cardEffect called 2007 returned 100% blocks executed 32%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  //int k;
        -:  651:  int x;
        -:  652:  int index;
     2007:  653:  int currentPlayer = whoseTurn(state);
     2007:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        -:  656:  //int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        -:  658:  //int drawntreasure=0;
        -:  659:  //int cardDrawn;
        -:  660:  //int z = 0;// this is the counter for the temp hand
     2007:  661:  if (nextPlayer > (state->numPlayers - 1)){
     2007:  661-block  0
branch  0 taken 678
branch  1 taken 1329
      678:  662:    nextPlayer = 0;
      678:  663:  }
      678:  663-block  0
unconditional  0 taken 678
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
     2007:  667:  switch( card ) 
     2007:  667-block  0
branch  0 taken 1001
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 1001
branch  7 taken 0
branch  8 taken 2
branch  9 taken 0
branch 10 taken 3
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  668:    {
        -:  669:    case adventurer:
     1001:  670:      return adventurerAction(state);   
     1001:  670-block  0
unconditional  0 taken 1001
        -:  671:			
        -:  672:    case council_room:
        -:  673:      //+4 Cards
    #####:  674:      for (i = 0; i < 4; i++)
    $$$$$:  674-block  0
unconditional  0 never executed
    $$$$$:  674-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  674-block  2
unconditional  3 never executed
        -:  675:	{
    #####:  676:	  drawCard(currentPlayer, state);
    #####:  677:	}
    $$$$$:  677-block  0
unconditional  0 never executed
        -:  678:			
        -:  679:      //+1 Buy
    #####:  680:      state->numBuys++;
        -:  681:			
        -:  682:      //Each other player draws a card
    #####:  683:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  683-block  0
unconditional  0 never executed
    $$$$$:  683-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  683-block  2
unconditional  3 never executed
        -:  684:	{
    #####:  685:	  if ( i != currentPlayer )
    $$$$$:  685-block  0
branch  0 never executed
branch  1 never executed
        -:  686:	    {
    #####:  687:	      drawCard(i, state);
    #####:  688:	    }
    $$$$$:  688-block  0
unconditional  0 never executed
    #####:  689:	}
    $$$$$:  689-block  0
unconditional  0 never executed
        -:  690:			
        -:  691:      //put played card in played card pile
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:			
    #####:  694:      return 0;
    $$$$$:  694-block  0
unconditional  0 never executed
        -:  695:			
        -:  696:    case feast:
        -:  697:      //gain card with cost up to 5
        -:  698:      //Backup hand
    #####:  699:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  699-block  0
unconditional  0 never executed
    $$$$$:  699-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  699-block  2
unconditional  3 never executed
    #####:  700:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  701:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  702:      }
    $$$$$:  702-block  0
unconditional  0 never executed
        -:  703:      //Backup hand
        -:  704:
        -:  705:      //Update Coins for Buy
    #####:  706:      updateCoins(currentPlayer, state, 5);
    #####:  707:      x = 1;//Condition to loop on
    #####:  708:      while( x == 1) {//Buy one card
    $$$$$:  708-block  0
unconditional  0 never executed
    $$$$$:  708-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  708-block  2
unconditional  3 never executed
    #####:  709:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  709-block  0
branch  0 never executed
branch  1 never executed
        -:  710:	  if (DEBUG)
        -:  711:	    printf("None of that card left, sorry!\n");
        -:  712:
        -:  713:	  if (DEBUG){
        -:  714:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  715:	  }
    #####:  716:	}
    $$$$$:  716-block  0
unconditional  0 never executed
    #####:  717:	else if (state->coins < getCost(choice1)){
    $$$$$:  717-block  0
branch  0 never executed
branch  1 never executed
    #####:  718:	  printf("That card is too expensive!\n");
        -:  719:
        -:  720:	  if (DEBUG){
        -:  721:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  722:	  }
    #####:  723:	}
    $$$$$:  723-block  0
unconditional  0 never executed
        -:  724:	else{
        -:  725:
        -:  726:	  if (DEBUG){
        -:  727:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	  }
        -:  729:
    #####:  730:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  731:	  x = 0;//No more buying cards
    $$$$$:  731-block  0
unconditional  0 never executed
        -:  732:
        -:  733:	  if (DEBUG){
        -:  734:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  735:	  }
        -:  736:
        -:  737:	}
        -:  738:      }     
        -:  739:
        -:  740:      //Reset Hand
    #####:  741:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  741-block  0
unconditional  0 never executed
    $$$$$:  741-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  741-block  2
unconditional  3 never executed
    #####:  742:	state->hand[currentPlayer][i] = temphand[i];
    #####:  743:	temphand[i] = -1;
    #####:  744:      }
    $$$$$:  744-block  0
unconditional  0 never executed
        -:  745:      //Reset Hand
        -:  746:      			
    #####:  747:      return 0;
    $$$$$:  747-block  0
unconditional  0 never executed
        -:  748:			
        -:  749:    case gardens:
    #####:  750:      return -1;
    $$$$$:  750-block  0
unconditional  0 never executed
        -:  751:			
        -:  752:    case mine:
    #####:  753:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  754:
    #####:  755:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  755-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  755-block  1
branch  2 never executed
branch  3 never executed
        -:  756:	{
    #####:  757:	  return -1;
    $$$$$:  757-block  0
unconditional  0 never executed
        -:  758:	}
        -:  759:		
    #####:  760:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  760-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  760-block  1
branch  2 never executed
branch  3 never executed
        -:  761:	{
    #####:  762:	  return -1;
    $$$$$:  762-block  0
unconditional  0 never executed
        -:  763:	}
        -:  764:
    #####:  765:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  765-block  0
branch  0 never executed
branch  1 never executed
        -:  766:	{
    #####:  767:	  return -1;
    $$$$$:  767-block  0
unconditional  0 never executed
        -:  768:	}
        -:  769:
    #####:  770:      gainCard(choice2, state, 2, currentPlayer);
        -:  771:
        -:  772:      //discard card from hand
    #####:  773:      discardCard(handPos, currentPlayer, state, 0);
        -:  774:
        -:  775:      //discard trashed card
    #####:  776:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  776-block  0
unconditional  0 never executed
    $$$$$:  776-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  776-block  2
unconditional  3 never executed
        -:  777:	{
    #####:  778:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  778-block  0
branch  0 never executed
branch  1 never executed
        -:  779:	    {
    #####:  780:	      discardCard(i, currentPlayer, state, 0);			
    #####:  781:	      break;
    $$$$$:  781-block  0
unconditional  0 never executed
        -:  782:	    }
    #####:  783:	}
    $$$$$:  783-block  0
unconditional  0 never executed
        -:  784:			
    #####:  785:      return 0;
    $$$$$:  785-block  0
unconditional  0 never executed
        -:  786:			
        -:  787:    case remodel:
    #####:  788:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  789:
    #####:  790:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  790-block  0
branch  0 never executed
branch  1 never executed
        -:  791:	{
    #####:  792:	  return -1;
    $$$$$:  792-block  0
unconditional  0 never executed
        -:  793:	}
        -:  794:
    #####:  795:      gainCard(choice2, state, 0, currentPlayer);
        -:  796:
        -:  797:      //discard card from hand
    #####:  798:      discardCard(handPos, currentPlayer, state, 0);
        -:  799:
        -:  800:      //discard trashed card
    #####:  801:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  801-block  0
unconditional  0 never executed
    $$$$$:  801-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  801-block  2
unconditional  3 never executed
        -:  802:	{
    #####:  803:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  803-block  0
branch  0 never executed
branch  1 never executed
        -:  804:	    {
    #####:  805:	      discardCard(i, currentPlayer, state, 0);			
    #####:  806:	      break;
    $$$$$:  806-block  0
unconditional  0 never executed
        -:  807:	    }
    #####:  808:	}
    $$$$$:  808-block  0
unconditional  0 never executed
        -:  809:
        -:  810:
    #####:  811:      return 0;
    $$$$$:  811-block  0
unconditional  0 never executed
        -:  812:		
        -:  813:    case smithy:
        -:  814:      //+3 Cards
     1001:  815:      return smithyAction(state, handPos);   
     1001:  815-block  0
unconditional  0 taken 1001
        -:  816:		
        -:  817:    case village:
        -:  818:      //+1 Card
    #####:  819:      drawCard(currentPlayer, state);
        -:  820:			
        -:  821:      //+2 Actions
    #####:  822:      state->numActions = state->numActions + 2;
        -:  823:			
        -:  824:      //discard played card from hand
    #####:  825:      discardCard(handPos, currentPlayer, state, 0);
    #####:  826:      return 0;
    $$$$$:  826-block  0
unconditional  0 never executed
        -:  827:		
        -:  828:    case baron:
        2:  829:      state->numBuys++;//Increase buys by 1!
        2:  830:      if (choice1 > 0){//Boolean true or going to discard an estate
        2:  830-block  0
branch  0 taken 1
branch  1 taken 1
        1:  831:	int p = 0;//Iterator for hand!
        1:  832:	int card_not_discarded = 1;//Flag for discard set!
        2:  833:	while(card_not_discarded){
        1:  833-block  0
unconditional  0 taken 1
        2:  833-block  1
branch  1 taken 1
branch  2 taken 1
        1:  833-block  2
unconditional  3 taken 1
        1:  834:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        1:  834-block  0
branch  0 taken 1
branch  1 taken 0
        1:  835:	    state->coins += 4;//Add 4 coins to the amount of coins
        1:  836:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        1:  837:	    state->discardCount[currentPlayer]++;
        6:  838:	    for (;p < state->handCount[currentPlayer]; p++){
        1:  838-block  0
unconditional  0 taken 1
        6:  838-block  1
branch  1 taken 5
branch  2 taken 1
        5:  838-block  2
unconditional  3 taken 5
        5:  839:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        5:  840:	    }
        5:  840-block  0
unconditional  0 taken 5
        1:  841:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        1:  842:	    state->handCount[currentPlayer]--;
        1:  843:	    card_not_discarded = 0;//Exit the loop
        1:  844:	  }
        1:  844-block  0
unconditional  0 taken 1
    #####:  845:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  845-block  0
branch  0 never executed
branch  1 never executed
        -:  846:	    if(DEBUG) {
        -:  847:	      printf("No estate cards in your hand, invalid choice\n");
        -:  848:	      printf("Must gain an estate if there are any\n");
        -:  849:	    }
    #####:  850:	    if (supplyCount(estate, state) > 0){
    $$$$$:  850-block  0
branch  0 never executed
branch  1 never executed
    #####:  851:	      gainCard(estate, state, 0, currentPlayer);
    #####:  852:	      state->supplyCount[estate]--;//Decrement estates
    #####:  853:	      if (supplyCount(estate, state) == 0){
    $$$$$:  853-block  0
branch  0 never executed
branch  1 never executed
    #####:  854:		isGameOver(state);
    #####:  855:	      }
    $$$$$:  855-block  0
unconditional  0 never executed
    #####:  856:	    }
    $$$$$:  856-block  0
unconditional  0 never executed
    #####:  857:	    card_not_discarded = 0;//Exit the loop
    #####:  858:	  }
    $$$$$:  858-block  0
unconditional  0 never executed
        -:  859:			    
        -:  860:	  else{
    #####:  861:	    p++;//Next card
    $$$$$:  861-block  0
unconditional  0 never executed
        -:  862:	  }
        -:  863:	}
        1:  864:      }
        1:  864-block  0
unconditional  0 taken 1
        -:  865:			    
        -:  866:      else{
        1:  867:	if (supplyCount(estate, state) > 0){
        1:  867-block  0
branch  0 taken 1
branch  1 taken 0
        1:  868:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        1:  869:	  state->supplyCount[estate]--;//Decrement Estates
        1:  870:	  if (supplyCount(estate, state) == 0){
        1:  870-block  0
branch  0 taken 0
branch  1 taken 1
    #####:  871:	    isGameOver(state);
    #####:  872:	  }
    $$$$$:  872-block  0
unconditional  0 never executed
        1:  873:	}
        1:  873-block  0
unconditional  0 taken 1
        -:  874:      }
        -:  875:	    
        -:  876:      
        2:  877:      return 0;
        2:  877-block  0
unconditional  0 taken 2
        -:  878:		
        -:  879:    case great_hall:
        -:  880:      //+1 Card
    #####:  881:      drawCard(currentPlayer, state);
        -:  882:			
        -:  883:      //+1 Actions
    #####:  884:      state->numActions++;
        -:  885:			
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
    #####:  888:      return 0;
    $$$$$:  888-block  0
unconditional  0 never executed
        -:  889:		
        -:  890:    case minion:
        -:  891:      //+1 action
        3:  892:      state->numActions++;
        -:  893:			
        -:  894:      //discard card from hand
        3:  895:      discardCard(handPos, currentPlayer, state, 0);
        -:  896:			
        3:  897:      if (choice1)		//+2 coins
        3:  897-block  0
branch  0 taken 1
branch  1 taken 2
        -:  898:	{
        1:  899:	  state->coins = state->coins + 2;
        1:  900:	}
        1:  900-block  0
unconditional  0 taken 1
        -:  901:			
        2:  902:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        2:  902-block  0
branch  0 taken 2
branch  1 taken 0
        -:  903:	{
        -:  904:	  //discard hand
       10:  905:	  while(numHandCards(state) > 0)
        2:  905-block  0
unconditional  0 taken 2
       10:  905-block  1
branch  1 taken 8
branch  2 taken 2
        8:  905-block  2
unconditional  3 taken 8
        -:  906:	    {
        8:  907:	      discardCard(handPos, currentPlayer, state, 0);
        -:  908:	    }
        -:  909:				
        -:  910:	  //draw 4
       10:  911:	  for (i = 0; i < 4; i++)
        2:  911-block  0
unconditional  0 taken 2
       10:  911-block  1
branch  1 taken 8
branch  2 taken 2
        8:  911-block  2
unconditional  3 taken 8
        -:  912:	    {
        8:  913:	      drawCard(currentPlayer, state);
        8:  914:	    }
        8:  914-block  0
unconditional  0 taken 8
        -:  915:				
        -:  916:	  //other players discard hand and redraw if hand size > 4
        6:  917:	  for (i = 0; i < state->numPlayers; i++)
        2:  917-block  0
unconditional  0 taken 2
        6:  917-block  1
branch  1 taken 4
branch  2 taken 2
        4:  917-block  2
unconditional  3 taken 4
        -:  918:	    {
        4:  919:	      if (i != currentPlayer)
        4:  919-block  0
branch  0 taken 2
branch  1 taken 2
        -:  920:		{
        2:  921:		  if ( state->handCount[i] > 4 )
        2:  921-block  0
branch  0 taken 1
branch  1 taken 1
        -:  922:		    {
        -:  923:		      //discard hand
        6:  924:		      while( state->handCount[i] > 0 )
        1:  924-block  0
unconditional  0 taken 1
        6:  924-block  1
branch  1 taken 5
branch  2 taken 1
        5:  924-block  2
unconditional  3 taken 5
        -:  925:			{
        5:  926:			  discardCard(handPos, i, state, 0);
        -:  927:			}
        -:  928:							
        -:  929:		      //draw 4
        5:  930:		      for (j = 0; j < 4; j++)
        1:  930-block  0
unconditional  0 taken 1
        5:  930-block  1
branch  1 taken 4
branch  2 taken 1
        4:  930-block  2
unconditional  3 taken 4
        -:  931:			{
        4:  932:			  drawCard(i, state);
        4:  933:			}
        4:  933-block  0
unconditional  0 taken 4
        1:  934:		    }
        1:  934-block  0
unconditional  0 taken 1
        2:  935:		}
        2:  935-block  0
unconditional  0 taken 2
        4:  936:	    }
        4:  936-block  0
unconditional  0 taken 4
        -:  937:				
        2:  938:	}
        2:  938-block  0
unconditional  0 taken 2
        3:  939:      return 0;
        3:  939-block  0
unconditional  0 taken 3
        -:  940:		
        -:  941:    case steward:
    #####:  942:      if (choice1 == 1)
    $$$$$:  942-block  0
branch  0 never executed
branch  1 never executed
        -:  943:	{
        -:  944:	  //+2 cards
    #####:  945:	  drawCard(currentPlayer, state);
    #####:  946:	  drawCard(currentPlayer, state);
    #####:  947:	}
    $$$$$:  947-block  0
unconditional  0 never executed
    #####:  948:      else if (choice1 == 2)
    $$$$$:  948-block  0
branch  0 never executed
branch  1 never executed
        -:  949:	{
        -:  950:	  //+2 coins
    #####:  951:	  state->coins = state->coins + 2;
    #####:  952:	}
    $$$$$:  952-block  0
unconditional  0 never executed
        -:  953:      else
        -:  954:	{
        -:  955:	  //trash 2 cards in hand
    #####:  956:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  957:	  discardCard(choice3, currentPlayer, state, 1);
    $$$$$:  957-block  0
unconditional  0 never executed
        -:  958:	}
        -:  959:			
        -:  960:      //discard card from hand
    #####:  961:      discardCard(handPos, currentPlayer, state, 0);
    #####:  962:      return 0;
    $$$$$:  962-block  0
unconditional  0 never executed
        -:  963:		
        -:  964:    case tribute:
    #####:  965:        return tributeAction(state);   
    $$$$$:  965-block  0
unconditional  0 never executed
        -:  966:		
        -:  967:    case ambassador:
    #####:  968:        return ambassadorAction(state, handPos, choice1, choice2);   
    $$$$$:  968-block  0
unconditional  0 never executed
        -:  969:		
        -:  970:    case cutpurse:
    #####:  971:        return cutpurseAction(state, handPos);   
    $$$$$:  971-block  0
unconditional  0 never executed
        -:  972:		
        -:  973:    case embargo: 
        -:  974:      //+2 Coins
    #####:  975:      state->coins = state->coins + 2;
        -:  976:			
        -:  977:      //see if selected pile is in play
    #####:  978:      if ( state->supplyCount[choice1] == -1 )
    $$$$$:  978-block  0
branch  0 never executed
branch  1 never executed
        -:  979:	{
    #####:  980:	  return -1;
    $$$$$:  980-block  0
unconditional  0 never executed
        -:  981:	}
        -:  982:			
        -:  983:      //add embargo token to selected supply pile
    #####:  984:      state->embargoTokens[choice1]++;
        -:  985:			
        -:  986:      //trash card
    #####:  987:      discardCard(handPos, currentPlayer, state, 1);		
    #####:  988:      return 0;
    $$$$$:  988-block  0
unconditional  0 never executed
        -:  989:		
        -:  990:    case outpost:
        -:  991:      //set outpost flag
    #####:  992:      state->outpostPlayed++;
        -:  993:			
        -:  994:      //discard card
    #####:  995:      discardCard(handPos, currentPlayer, state, 0);
    #####:  996:      return 0;
    $$$$$:  996-block  0
unconditional  0 never executed
        -:  997:		
        -:  998:    case salvager:
        -:  999:      //+1 buy
    #####: 1000:      state->numBuys++;
        -: 1001:			
    #####: 1002:      if (choice1)
    $$$$$: 1002-block  0
branch  0 never executed
branch  1 never executed
        -: 1003:	{
        -: 1004:	  //gain coins equal to trashed card
    #####: 1005:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1006:	  //trash card
    #####: 1007:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1008:	}
    $$$$$: 1008-block  0
unconditional  0 never executed
        -: 1009:			
        -: 1010:      //discard card
    #####: 1011:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1012:      return 0;
    $$$$$: 1012-block  0
unconditional  0 never executed
        -: 1013:		
        -: 1014:    case sea_hag:
    #####: 1015:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1015-block  0
unconditional  0 never executed
    $$$$$: 1015-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1015-block  2
unconditional  3 never executed
    #####: 1016:	if (i != currentPlayer){
    $$$$$: 1016-block  0
branch  0 never executed
branch  1 never executed
    #####: 1017:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1018:	  state->discardCount[i]++;
    #####: 1019:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1020:	}
    $$$$$: 1020-block  0
unconditional  0 never executed
    #####: 1021:      }
    $$$$$: 1021-block  0
unconditional  0 never executed
    #####: 1022:      return 0;
    $$$$$: 1022-block  0
unconditional  0 never executed
        -: 1023:		
        -: 1024:    case treasure_map:
        -: 1025:      //search hand for another treasure_map
    #####: 1026:      index = -1;
    #####: 1027:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1027-block  0
unconditional  0 never executed
    $$$$$: 1027-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1027-block  2
unconditional  3 never executed
        -: 1028:	{
    #####: 1029:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1029-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1029-block  1
branch  2 never executed
branch  3 never executed
        -: 1030:	    {
    #####: 1031:	      index = i;
    #####: 1032:	      break;
    $$$$$: 1032-block  0
unconditional  0 never executed
        -: 1033:	    }
    #####: 1034:	}
    $$$$$: 1034-block  0
unconditional  0 never executed
    #####: 1035:      if (index > -1)
    $$$$$: 1035-block  0
branch  0 never executed
branch  1 never executed
        -: 1036:	{
        -: 1037:	  //trash both treasure cards
    #####: 1038:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1039:	  discardCard(index, currentPlayer, state, 1);
        -: 1040:
        -: 1041:	  //gain 4 Gold cards
    #####: 1042:	  for (i = 0; i < 4; i++)
    $$$$$: 1042-block  0
unconditional  0 never executed
    $$$$$: 1042-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1042-block  2
unconditional  3 never executed
        -: 1043:	    {
    #####: 1044:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1045:	    }
    $$$$$: 1045-block  0
unconditional  0 never executed
        -: 1046:				
        -: 1047:	  //return success
    #####: 1048:	  return 1;
    $$$$$: 1048-block  0
unconditional  0 never executed
        -: 1049:	}
        -: 1050:			
        -: 1051:      //no second treasure_map found in hand
    #####: 1052:      return -1;
    $$$$$: 1052-block  0
unconditional  0 never executed
        -: 1053:    }
        -: 1054:	
    #####: 1055:  return -1;
    $$$$$: 1055-block  0
unconditional  0 never executed
     2007: 1056:}
     2007: 1056-block  0
unconditional  0 taken 2007
        -: 1057:
function discardCard called 3019 returned 100% blocks executed 90%
        -: 1058:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1059:{
        -: 1060:	
        -: 1061:  //if card is not trashed, added to Played pile 
     3019: 1062:  if (trashFlag < 1)
     3019: 1062-block  0
branch  0 taken 3019
branch  1 taken 0
        -: 1063:    {
        -: 1064:      //add card to played pile
     3019: 1065:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     3019: 1066:      state->playedCardCount++;
     3019: 1067:    }
     3019: 1067-block  0
unconditional  0 taken 3019
        -: 1068:	
        -: 1069:  //set played card to -1
     3019: 1070:  state->hand[currentPlayer][handPos] = -1;
        -: 1071:	
        -: 1072:  //remove card from player's hand
     3019: 1073:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
     3019: 1073-block  0
branch  0 taken 1875
branch  1 taken 1144
        -: 1074:    {
        -: 1075:      //reduce number of cards in hand
     1875: 1076:      state->handCount[currentPlayer]--;
     1875: 1077:    }
     1875: 1077-block  0
unconditional  0 taken 1875
     1144: 1078:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
     1144: 1078-block  0
branch  0 taken 0
branch  1 taken 1144
        -: 1079:    {
        -: 1080:      //reduce number of cards in hand
    #####: 1081:      state->handCount[currentPlayer]--;
    #####: 1082:    }
    $$$$$: 1082-block  0
unconditional  0 never executed
        -: 1083:  else 	
        -: 1084:    {
        -: 1085:      //replace discarded card with last card in hand
     1144: 1086:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1087:      //set last card to -1
     1144: 1088:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1089:      //reduce number of cards in hand
     1144: 1090:      state->handCount[currentPlayer]--;
     1144: 1090-block  0
unconditional  0 taken 1144
        -: 1091:    }
        -: 1092:	
     3019: 1093:  return 0;
     3019: 1093-block  0
unconditional  0 taken 3019
        -: 1094:}
        -: 1095:
function gainCard called 2 returned 100% blocks executed 72%
        -: 1096:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1097:{
        -: 1098:  //Note: supplyPos is enum of choosen card
        -: 1099:	
        -: 1100:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1101:  if ( supplyCount(supplyPos, state) < 1 )
        2: 1101-block  0
branch  0 taken 0
branch  1 taken 2
        -: 1102:    {
    #####: 1103:      return -1;
    $$$$$: 1103-block  0
unconditional  0 never executed
        -: 1104:    }
        -: 1105:	
        -: 1106:  //added card for [whoseTurn] current player:
        -: 1107:  // toFlag = 0 : add to discard
        -: 1108:  // toFlag = 1 : add to deck
        -: 1109:  // toFlag = 2 : add to hand
        -: 1110:
        2: 1111:  if (toFlag == 1)
        2: 1111-block  0
branch  0 taken 0
branch  1 taken 2
        -: 1112:    {
    #####: 1113:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1114:      state->deckCount[player]++;
    #####: 1115:    }
    $$$$$: 1115-block  0
unconditional  0 never executed
        2: 1116:  else if (toFlag == 2)
        2: 1116-block  0
branch  0 taken 0
branch  1 taken 2
        -: 1117:    {
    #####: 1118:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1119:      state->handCount[player]++;
    #####: 1120:    }
    $$$$$: 1120-block  0
unconditional  0 never executed
        -: 1121:  else
        -: 1122:    {
        2: 1123:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1124:      state->discardCount[player]++;
        2: 1124-block  0
unconditional  0 taken 2
        -: 1125:    }
        -: 1126:	
        -: 1127:  //decrease number in supply pile
        2: 1128:  state->supplyCount[supplyPos]--;
        -: 1129:	 
        2: 1130:  return 0;
        2: 1130-block  0
unconditional  0 taken 2
        2: 1131:}
        2: 1131-block  0
unconditional  0 taken 2
        -: 1132:
function updateCoins called 2013 returned 100% blocks executed 85%
        -: 1133:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1134:{
        -: 1135:  int i;
        -: 1136:	
        -: 1137:  //reset coin count
     2013: 1138:  state->coins = 0;
        -: 1139:
        -: 1140:  //add coins for each Treasure card in player's hand
    12078: 1141:  for (i = 0; i < state->handCount[player]; i++)
     2013: 1141-block  0
unconditional  0 taken 2013
    12078: 1141-block  1
branch  1 taken 10065
branch  2 taken 2013
    10065: 1141-block  2
unconditional  3 taken 10065
        -: 1142:    {
    10065: 1143:      if (state->hand[player][i] == copper)
    10065: 1143-block  0
branch  0 taken 8052
branch  1 taken 2013
        -: 1144:	{
     8052: 1145:	  state->coins += 1;
     8052: 1146:	}
     8052: 1146-block  0
unconditional  0 taken 8052
     2013: 1147:      else if (state->hand[player][i] == silver)
     2013: 1147-block  0
branch  0 taken 0
branch  1 taken 2013
        -: 1148:	{
    #####: 1149:	  state->coins += 2;
    #####: 1150:	}
    $$$$$: 1150-block  0
unconditional  0 never executed
     2013: 1151:      else if (state->hand[player][i] == gold)
     2013: 1151-block  0
branch  0 taken 0
branch  1 taken 2013
        -: 1152:	{
    #####: 1153:	  state->coins += 3;
    #####: 1154:	}	
    $$$$$: 1154-block  0
unconditional  0 never executed
    10065: 1155:    }	
    10065: 1155-block  0
unconditional  0 taken 10065
        -: 1156:
        -: 1157:  //add bonus
     2013: 1158:  state->coins += bonus;
        -: 1159:
     2013: 1160:  return 0;
     2013: 1160-block  0
unconditional  0 taken 2013
        -: 1161:}
        -: 1162:
function adventurerAction called 1001 returned 100% blocks executed 86%
        -: 1163:int adventurerAction(struct gameState *state)
        -: 1164:{
     1001: 1165:    int currentPlayer = whoseTurn(state);
     1001: 1166:    int drawntreasure = 0;
        -: 1167:    int temphand[MAX_HAND];
     1001: 1168:    int z = 0;
     3198: 1169:    while (drawntreasure<2) {
     1001: 1169-block  0
unconditional  0 taken 1001
     3198: 1169-block  1
branch  1 taken 2197
branch  2 taken 1001
     2197: 1169-block  2
unconditional  3 taken 2197
     2197: 1170:        if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
     2197: 1170-block  0
branch  0 taken 0
branch  1 taken 2197
    #####: 1171:            shuffle(currentPlayer, state);
    #####: 1172:        }
    $$$$$: 1172-block  0
unconditional  0 never executed
     2197: 1173:        drawCard(currentPlayer, state);
     2197: 1174:        int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
     2197: 1175:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
     2197: 1175-block  0
branch  0 taken 195
branch  1 taken 2002
      195: 1175-block  1
branch  2 taken 195
branch  3 taken 0
      195: 1175-block  2
branch  4 taken 0
branch  5 taken 195
     2002: 1176:            drawntreasure++;
     2002: 1176-block  0
unconditional  0 taken 2002
        -: 1177:        else {
      195: 1178:            temphand[z] = cardDrawn;
      195: 1179:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      195: 1179-block  0
unconditional  0 taken 195
        -: 1180:
        -: 1181:        }
        -: 1182:    }
     1001: 1183:    while (z - 1 >= 0) {
     1001: 1183-block  0
unconditional  0 taken 1001
     1001: 1183-block  1
branch  1 taken 0
branch  2 taken 1001
    $$$$$: 1183-block  2
unconditional  3 never executed
    #####: 1184:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####: 1185:        z = z - 1;
        -: 1186:    }
     1001: 1187:    return 0;
     1001: 1187-block  0
unconditional  0 taken 1001
        -: 1188:}
        -: 1189:
function smithyAction called 1001 returned 100% blocks executed 100%
        -: 1190:int smithyAction(struct gameState *state, int handPos)
        -: 1191:{
     1001: 1192:    int currentPlayer = whoseTurn(state);
        -: 1193:
        -: 1194:    int i;
     4004: 1195:    for (i = 0; i < 3; i++)
     1001: 1195-block  0
unconditional  0 taken 1001
     4004: 1195-block  1
branch  1 taken 3003
branch  2 taken 1001
     3003: 1195-block  2
unconditional  3 taken 3003
        -: 1196:    {
     3003: 1197:        drawCard(currentPlayer, state);
        -: 1198:        //discard card from hand
     3003: 1199:        discardCard(handPos, currentPlayer, state, 0);  //Moved into for loop
     3003: 1200:    }
     3003: 1200-block  0
unconditional  0 taken 3003
        -: 1201:
     1001: 1202:    return 0;
     1001: 1202-block  0
unconditional  0 taken 1001
        -: 1203:}
        -: 1204:
function tributeAction called 0 returned 0% blocks executed 0%
        -: 1205:int tributeAction(struct gameState *state)
        -: 1206:{
    #####: 1207:    int currentPlayer = whoseTurn(state);
    #####: 1208:    int nextPlayer = currentPlayer + 1;
        -: 1209:    int i;
    #####: 1210:    if (nextPlayer >= (state->numPlayers - 1)) {    //> to >=
    $$$$$: 1210-block  0
branch  0 never executed
branch  1 never executed
    #####: 1211:        nextPlayer = 0;
    #####: 1212:    }
    $$$$$: 1212-block  0
unconditional  0 never executed
    #####: 1213:    int tributeRevealedCards[2] = { -1, -1 };
        -: 1214:
    #####: 1215:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
    $$$$$: 1215-block  0
branch  0 never executed
branch  1 never executed
    #####: 1216:        if (state->deckCount[nextPlayer] > 0) {
    $$$$$: 1216-block  0
branch  0 never executed
branch  1 never executed
    #####: 1217:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1218:            state->deckCount[nextPlayer]--;
    #####: 1219:        }
    $$$$$: 1219-block  0
unconditional  0 never executed
    #####: 1220:        else if (state->discardCount[nextPlayer] > 0) {
    $$$$$: 1220-block  0
branch  0 never executed
branch  1 never executed
    #####: 1221:            tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1222:            state->discardCount[nextPlayer]--;
    #####: 1223:        }
    $$$$$: 1223-block  0
unconditional  0 never executed
        -: 1224:        else {
        -: 1225:            //No Card to Reveal
        -: 1226:            if (DEBUG) {
        -: 1227:                printf("No cards to reveal\n");
        -: 1228:            }
        -: 1229:        }
    #####: 1230:    }
    $$$$$: 1230-block  0
unconditional  0 never executed
        -: 1231:
        -: 1232:    else {
    #####: 1233:        if (state->deckCount[nextPlayer] == 0) {
    $$$$$: 1233-block  0
branch  0 never executed
branch  1 never executed
    #####: 1234:            for (i = 0; i < state->discardCount[nextPlayer]; i++) {
    $$$$$: 1234-block  0
unconditional  0 never executed
    $$$$$: 1234-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1234-block  2
unconditional  3 never executed
    #####: 1235:                state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1236:                state->deckCount[nextPlayer]++;
    #####: 1237:                state->discard[nextPlayer][i] = -1;
    #####: 1238:                state->discardCount[nextPlayer]--;
    #####: 1239:            }
    $$$$$: 1239-block  0
unconditional  0 never executed
        -: 1240:
    #####: 1241:            shuffle(nextPlayer, state);//Shuffle the deck
    #####: 1242:        }
    $$$$$: 1242-block  0
unconditional  0 never executed
    #####: 1243:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1244:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1245:        state->deckCount[nextPlayer]--;
    #####: 1246:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1247:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1248:        state->deckCount[nextPlayer]--;
    $$$$$: 1248-block  0
unconditional  0 never executed
        -: 1249:    }
        -: 1250:
    #####: 1251:    if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one 
    $$$$$: 1251-block  0
branch  0 never executed
branch  1 never executed
    #####: 1252:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1253:        state->playedCardCount++;
    #####: 1254:        tributeRevealedCards[1] = -1;
    #####: 1255:    }
    $$$$$: 1255-block  0
unconditional  0 never executed
        -: 1256:
    #####: 1257:    for (i = 0; i <= 2; i++) {
    $$$$$: 1257-block  0
unconditional  0 never executed
    $$$$$: 1257-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1257-block  2
unconditional  3 never executed
    #####: 1258:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
    $$$$$: 1258-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1258-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1258-block  2
branch  4 never executed
branch  5 never executed
    #####: 1259:            state->coins += 2;
    #####: 1260:        }
    $$$$$: 1260-block  0
unconditional  0 never executed
        -: 1261:
    #####: 1262:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
    $$$$$: 1262-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1262-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1262-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1262-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1262-block  4
branch  8 never executed
branch  9 never executed
    #####: 1263:            drawCard(currentPlayer, state);
    #####: 1264:            drawCard(currentPlayer, state);
    #####: 1265:        }
    $$$$$: 1265-block  0
unconditional  0 never executed
        -: 1266:        else {//Action Card
    #####: 1267:            state->numActions = state->numActions + 2;
    $$$$$: 1267-block  0
unconditional  0 never executed
        -: 1268:        }
    #####: 1269:    }
    $$$$$: 1269-block  0
unconditional  0 never executed
        -: 1270:
    #####: 1271:    return 0;
    $$$$$: 1271-block  0
unconditional  0 never executed
        -: 1272:}
        -: 1273:
function ambassadorAction called 0 returned 0% blocks executed 0%
        -: 1274:int ambassadorAction(struct gameState *state, int handPos, int choice1, int choice2)
        -: 1275:{
    #####: 1276:    int j = 0;		//used to check if player has enough cards to discard
        -: 1277:    int i;
    #####: 1278:    int currentPlayer = whoseTurn(state);
        -: 1279:
    #####: 1280:    if (choice2 > 2 || choice2 < 0)
    $$$$$: 1280-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1280-block  1
branch  2 never executed
branch  3 never executed
        -: 1281:    {
    #####: 1282:	    return -1;				
    $$$$$: 1282-block  0
unconditional  0 never executed
        -: 1283:    }
        -: 1284:
    #####: 1285:    if (choice1 == handPos)
    $$$$$: 1285-block  0
branch  0 never executed
branch  1 never executed
        -: 1286:	{
    #####: 1287:	    return -1;
    $$$$$: 1287-block  0
unconditional  0 never executed
        -: 1288:	}
        -: 1289:
    #####: 1290:    for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1290-block  0
unconditional  0 never executed
    $$$$$: 1290-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1290-block  2
unconditional  3 never executed
        -: 1291:	{
    #####: 1292:	    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1292-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1292-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1292-block  2
branch  4 never executed
branch  5 never executed
        -: 1293:	    {
    #####: 1294:	        j++;
    #####: 1295:	    }
    $$$$$: 1295-block  0
unconditional  0 never executed
    #####: 1296:	}
    $$$$$: 1296-block  0
unconditional  0 never executed
    #####: 1297:    if (j < choice2)
    $$$$$: 1297-block  0
branch  0 never executed
branch  1 never executed
        -: 1298:	{
    #####: 1299:	    return -1;				
    $$$$$: 1299-block  0
unconditional  0 never executed
        -: 1300:    }
        -: 1301:
        -: 1302:    if (DEBUG) 
        -: 1303:	    printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1304:
        -: 1305:    //increase supply count for choosen card by amount being discarded
    #####: 1306:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1307:			
        -: 1308:    //each other player gains a copy of revealed card
    #####: 1309:    for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1309-block  0
unconditional  0 never executed
    $$$$$: 1309-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1309-block  2
unconditional  3 never executed
        -: 1310:	{
    #####: 1311:	    if (i != currentPlayer)
    $$$$$: 1311-block  0
branch  0 never executed
branch  1 never executed
        -: 1312:	    {
    #####: 1313:	        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1314:	    }
    $$$$$: 1314-block  0
unconditional  0 never executed
    #####: 1315:	}
    $$$$$: 1315-block  0
unconditional  0 never executed
        -: 1316:
        -: 1317:    //discard played card from hand
    #####: 1318:    discardCard(handPos, currentPlayer, state, 0);			
        -: 1319:
        -: 1320:    //trash copies of cards returned to supply
    #####: 1321:    for (j = 0; j < choice2; j++)
    $$$$$: 1321-block  0
unconditional  0 never executed
    $$$$$: 1321-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1321-block  2
unconditional  3 never executed
        -: 1322:	{
    #####: 1323:	    for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1323-block  0
unconditional  0 never executed
    $$$$$: 1323-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1323-block  2
unconditional  3 never executed
        -: 1324:	    {
    #####: 1325:	        if (state->hand[currentPlayer][j] == state->hand[currentPlayer][choice1])   //i to j
    $$$$$: 1325-block  0
branch  0 never executed
branch  1 never executed
        -: 1326:	        {
    #####: 1327:		        discardCard(i, currentPlayer, state, 1);
    #####: 1328:		        break;
    $$$$$: 1328-block  0
unconditional  0 never executed
        -: 1329:		    }
    #####: 1330:	    }
    $$$$$: 1330-block  0
unconditional  0 never executed
    #####: 1331:	}			
    $$$$$: 1331-block  0
unconditional  0 never executed
        -: 1332:
    #####: 1333:    return 0;
    $$$$$: 1333-block  0
unconditional  0 never executed
    #####: 1334:}
    $$$$$: 1334-block  0
unconditional  0 never executed
        -: 1335:
function cutpurseAction called 0 returned 0% blocks executed 0%
        -: 1336:int cutpurseAction(struct gameState *state, int handPos)
        -: 1337:{
    #####: 1338:    int currentPlayer = whoseTurn(state);
        -: 1339:
    #####: 1340:    updateCoins(currentPlayer, state, 2);
        -: 1341:    int i, j, k;
        -: 1342:
    #####: 1343:    for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1343-block  0
unconditional  0 never executed
    $$$$$: 1343-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1343-block  2
unconditional  3 never executed
        -: 1344:    {
    #####: 1345:        if (i != currentPlayer)
    $$$$$: 1345-block  0
branch  0 never executed
branch  1 never executed
        -: 1346:        {
    #####: 1347:            for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1347-block  0
unconditional  0 never executed
    $$$$$: 1347-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1347-block  2
unconditional  3 never executed
        -: 1348:            {
    #####: 1349:                if (state->hand[j][i] == copper)
    $$$$$: 1349-block  0
branch  0 never executed
branch  1 never executed
        -: 1350:                {
    #####: 1351:                    discardCard(j, i, state, 0);
    #####: 1352:                    break;
    $$$$$: 1352-block  0
unconditional  0 never executed
        -: 1353:                }
    #####: 1354:                if (j == state->handCount[i])
    $$$$$: 1354-block  0
branch  0 never executed
branch  1 never executed
        -: 1355:                {
    #####: 1356:                    for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1356-block  0
unconditional  0 never executed
    $$$$$: 1356-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1356-block  2
unconditional  3 never executed
        -: 1357:                    {
        -: 1358:                        if (DEBUG)
        -: 1359:                            printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1360:                    }
    $$$$$: 1360-block  0
unconditional  0 never executed
    #####: 1361:                    break;
    $$$$$: 1361-block  0
unconditional  0 never executed
        -: 1362:                }
    #####: 1363:            }
    $$$$$: 1363-block  0
unconditional  0 never executed
        -: 1364:
    #####: 1365:        }
    $$$$$: 1365-block  0
unconditional  0 never executed
        -: 1366:
    #####: 1367:    }
    $$$$$: 1367-block  0
unconditional  0 never executed
        -: 1368:
        -: 1369:    //discard played card from hand
    #####: 1370:    discardCard(handPos, currentPlayer, state, 0);
        -: 1371:
    #####: 1372:    return 0;
    $$$$$: 1372-block  0
unconditional  0 never executed
        -: 1373:}
        -: 1374:
        -: 1375://end of dominion.c
        -: 1376:
